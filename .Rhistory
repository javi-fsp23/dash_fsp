modalDialog(
title = "Create new record not successful",
tags$i("Please enter valid values and try again"), br(), br(),
tags$b("Error:"), br(),
tags$code(e$message)
)
)
}
)
reset("customer_first")
reset("customer_last") # reset from shinyjs
})
con <- dbConnect(RSQLite::SQLite(), dbname = "data.db")
con <- dbConnect(RSQLite::SQLite(), dbname = "data.db")
dbGetQuery(con, 'CREATE TABLE IF NOT EXISTS customer (
customer_first TEXT,
customer_last TEXT,
gender TEXT,
dob TEXT);')
add_new_customer <- function(first_name, last_name, gender, dob) {
query <- sprintf("INSERT INTO customer (customer_first, customer_last, gender, dob)
VALUES ('%s', '%s', '%s', '%s')",
first_name, last_name, gender, dob)
dbExecute(con, query)
}
search_customer <- function(first_name, last_name, dob) {
query <- sprintf("SELECT rowid AS 'Customer ID', customer_first AS 'First name',
customer_last AS 'Last name', dob AS DOB
FROM customer
WHERE customer_first LIKE '%%%s%%'
AND customer_last LIKE '%%%s%%'
AND dob LIKE '%%%s%%'",
first_name, last_name, dob)
dbGetQuery(con, query)
}
modify_customer <- function(customer_id, first_name, last_name, dob) {
query <- sprintf("UPDATE customer
SET customer_first = '%s', customer_last = '%s', dob = '%s'
WHERE rowid = %d",
first_name, last_name, dob, customer_id)
dbExecute(con, query)
}
delete_customer <- function(customer_id) {
query <- sprintf("DELETE FROM customer WHERE rowid = %d", customer_id)
dbExecute(con, query)
}
shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.conditionedPanels == 0",
helpText("This is About")
),
conditionalPanel(
condition = "input.conditionedPanels == 1",
textInput("customer_first", "First Name", ""),
textInput("customer_last", "Last Name", ""),
selectInput("gender", "1. Gender", choices = c("Male" = 0, "Female" = 1), selected = 0, selectize = FALSE),
dateInput("dob", "Date of birth:", value = "1980-01-01", format = "yyyy-mm-dd"),
actionButton("submit", "Create")
),
conditionalPanel(
condition = "input.conditionedPanels == 2",
textInput("customer_first_s", "First Name", ""),
textInput("customer_last_s", "Last Name", ""),
dateInput("dob_s", "Date:", value = "")
),
actionButton("search", "Search")
), # sidebarPanel
mainPanel(
tabsetPanel(
id = "conditionedPanels",
tabPanel("About", value = 0, h3("About the application")),
navbarMenu("CRM",
tabPanel("New Customer", value = 1, br(), br(), p("Please save the customer ID for future reference. In case customer id has been lost then please use the customer patient panel for search.")),
tabPanel("Existing Customer", value = 2, DT::dataTableOutput("res"))
) # navbarMenu
) # tabSetPanel
), # mainPanel
tags$script(
"$(document).on('click', '#res button', function () {
Shiny.onInputChange('lastClickId', this.id);
Shiny.onInputChange('lastClick', Math.random())
});"
) # tags$script
) # sidebarLayout
), # ui
server = function(input, output, session) {
# Observador para agregar un nuevo cliente
observeEvent(input$submit, {
tryCatch(
{
add_new_customer(input$customer_first, input$customer_last, input$gender, input$dob)
showModal(
modalDialog(
title = "Record created successfully",
span('New customer record was created with ID:', strong(em(dbGetQuery(con, "SELECT last_insert_rowid();")[1, 1]))))
)
},
error = function(e) {
showModal(
modalDialog(
title = "Create new record not successful",
tags$i("Please enter valid values and try again"), br(), br(),
tags$b("Error:"), br(),
tags$code(e$message)
)
)
}
)
reset("customer_first")
reset("customer_last") # reset from shinyjs
})
library(shiny)
library(shinyjs)
library(DT)
library(data.table)
library(DBI)
library(RSQLite)
# Conexión a la base de datos SQLite
con <- dbConnect(RSQLite::SQLite(), dbname = "data.db")
# Crear tabla si no existe
dbGetQuery(con, 'CREATE TABLE IF NOT EXISTS customer (
customer_first TEXT,
customer_last TEXT,
gender TEXT,
dob TEXT);')
# Función para agregar un nuevo cliente
add_new_customer <- function(first_name, last_name, gender, dob) {
query <- sprintf("INSERT INTO customer (customer_first, customer_last, gender, dob)
VALUES ('%s', '%s', '%s', '%s')",
first_name, last_name, gender, dob)
dbExecute(con, query)
}
# Función para buscar clientes
search_customer <- function(first_name, last_name, dob) {
query <- sprintf("SELECT rowid AS 'Customer ID', customer_first AS 'First name',
customer_last AS 'Last name', dob AS DOB
FROM customer
WHERE customer_first LIKE '%%%s%%'
AND customer_last LIKE '%%%s%%'
AND dob LIKE '%%%s%%'",
first_name, last_name, dob)
dbGetQuery(con, query)
}
# Función para modificar un cliente existente
modify_customer <- function(customer_id, first_name, last_name, dob) {
query <- sprintf("UPDATE customer
SET customer_first = '%s', customer_last = '%s', dob = '%s'
WHERE rowid = %d",
first_name, last_name, dob, customer_id)
dbExecute(con, query)
}
# Función para eliminar un cliente
delete_customer <- function(customer_id) {
query <- sprintf("DELETE FROM customer WHERE rowid = %d", customer_id)
dbExecute(con, query)
}
# App Shiny
shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.conditionedPanels == 0",
helpText("This is About")
),
conditionalPanel(
condition = "input.conditionedPanels == 1",
textInput("customer_first", "First Name", ""),
textInput("customer_last", "Last Name", ""),
selectInput("gender", "1. Gender", choices = c("Male" = 0, "Female" = 1), selected = 0, selectize = FALSE),
dateInput("dob", "Date of birth:", value = "1980-01-01", format = "yyyy-mm-dd"),
actionButton("submit", "Create")
),
conditionalPanel(
condition = "input.conditionedPanels == 2",
textInput("customer_first_s", "First Name", ""),
textInput("customer_last_s", "Last Name", ""),
dateInput("dob_s", "Date:", value = "")
),
actionButton("search", "Search")
), # sidebarPanel
mainPanel(
tabsetPanel(
id = "conditionedPanels",
tabPanel("About", value = 0, h3("About the application")),
navbarMenu("CRM",
tabPanel("New Customer", value = 1, br(), br(), p("Please save the customer ID for future reference. In case customer id has been lost then please use the customer patient panel for search.")),
tabPanel("Existing Customer", value = 2, DT::dataTableOutput("res"))
) # navbarMenu
) # tabSetPanel
), # mainPanel
tags$script(
"$(document).on('click', '#res button', function () {
Shiny.onInputChange('lastClickId', this.id);
Shiny.onInputChange('lastClick', Math.random())
});"
) # tags$script
) # sidebarLayout
), # ui
server = function(input, output, session) {
# Observador para agregar un nuevo cliente
observeEvent(input$submit, {
tryCatch(
{
add_new_customer(input$customer_first, input$customer_last, input$gender, input$dob)
showModal(
modalDialog(
title = "Record created successfully",
span('New customer record was created with ID:', strong(em(dbGetQuery(con, "SELECT last_insert_rowid();")[1, 1]))))
)
},
error = function(e) {
showModal(
modalDialog(
title = "Create new record not successful",
tags$i("Please enter valid values and try again"), br(), br(),
tags$b("Error:"), br(),
tags$code(e$message)
)
)
}
)
reset("customer_first")
reset("customer_last") # reset from shinyjs
})
}
library(shiny)
library(shinyjs)
library(DT)
library(data.table)
library(DBI)
library(RSQLite)
# Conexión a la base de datos SQLite
con <- dbConnect(RSQLite::SQLite(), dbname = "data.db")
# Crear tabla si no existe
dbGetQuery(con, 'CREATE TABLE IF NOT EXISTS customer (
customer_first TEXT,
customer_last TEXT,
gender TEXT,
dob TEXT);')
# Función para agregar un nuevo cliente
add_new_customer <- function(first_name, last_name, gender, dob) {
query <- sprintf("INSERT INTO customer (customer_first, customer_last, gender, dob)
VALUES ('%s', '%s', '%s', '%s')",
first_name, last_name, gender, dob)
dbExecute(con, query)
}
# Función para buscar clientes
search_customer <- function(first_name, last_name, dob) {
query <- sprintf("SELECT rowid AS 'Customer ID', customer_first AS 'First name',
customer_last AS 'Last name', dob AS DOB
FROM customer
WHERE customer_first LIKE '%%%s%%'
AND customer_last LIKE '%%%s%%'
AND dob LIKE '%%%s%%'",
first_name, last_name, dob)
dbGetQuery(con, query)
}
# Función para modificar un cliente existente
modify_customer <- function(customer_id, first_name, last_name, dob) {
query <- sprintf("UPDATE customer
SET customer_first = '%s', customer_last = '%s', dob = '%s'
WHERE rowid = %d",
first_name, last_name, dob, customer_id)
dbExecute(con, query)
}
# Función para eliminar un cliente
delete_customer <- function(customer_id) {
query <- sprintf("DELETE FROM customer WHERE rowid = %d", customer_id)
dbExecute(con, query)
}
# App Shiny
shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(
conditionalPanel(
condition = "input.conditionedPanels == 0",
helpText("This is About")
),
conditionalPanel(
condition = "input.conditionedPanels == 1",
textInput("customer_first", "First Name", ""),
textInput("customer_last", "Last Name", ""),
selectInput("gender", "1. Gender", choices = c("Male" = 0, "Female" = 1), selected = 0, selectize = FALSE),
dateInput("dob", "Date of birth:", value = "1980-01-01", format = "yyyy-mm-dd"),
actionButton("submit", "Create")
),
conditionalPanel(
condition = "input.conditionedPanels == 2",
textInput("customer_first_s", "First Name", ""),
textInput("customer_last_s", "Last Name", ""),
dateInput("dob_s", "Date:", value = "")
),
actionButton("search", "Search")
), # sidebarPanel
mainPanel(
tabsetPanel(
id = "conditionedPanels",
tabPanel("About", value = 0, h3("About the application")),
navbarMenu("CRM",
tabPanel("New Customer", value = 1, br(), br(), p("Please save the customer ID for future reference. In case customer id has been lost then please use the customer patient panel for search.")),
tabPanel("Existing Customer", value = 2, DT::dataTableOutput("res"))
) # navbarMenu
) # tabSetPanel
), # mainPanel
tags$script(
"$(document).on('click', '#res button', function () {
Shiny.onInputChange('lastClickId', this.id);
Shiny.onInputChange('lastClick', Math.random())
});"
) # tags$script
) # sidebarLayout
), # ui
server = function(input, output, session) {
# Observador para agregar un nuevo cliente
observeEvent(input$submit, {
tryCatch(
{
add_new_customer(input$customer_first, input$customer_last, input$gender, input$dob)
showModal(
modalDialog(
title = "Record created successfully",
span('New customer record was created with ID:', strong(em(dbGetQuery(con, "SELECT last_insert_rowid();")[1, 1]))))
)
},
error = function(e) {
showModal(
modalDialog(
title = "Create new record not successful",
tags$i("Please enter valid values and try again"), br(), br(),
tags$b("Error:"), br(),
tags$code(e$message)
)
)
}
)
reset("customer_first")
reset("customer_last") # reset from shinyjs
})
})
View(modify_customer)
runApp()
runApp()
runApp()
runApp()
runApp()
db_config <- config::get()$db
db_config
conn <- dbConnect(RSQLite::SQLite(), dbname = db_config$dbname)
conn
conn
conn
conn %>%
tbl('mtcars')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
credentials <- data.frame(
user = c("javi", "javi_1",  "javi_2"),
password = c(scrypt::hashPassword("javi"), scrypt::hashPassword("javi_1"), scrypt::hashPassword("javi_2")),
is_hashed_password = TRUE,
comment = c("super", "user", "user"),
stringsAsFactors = FALSE)
View(credentials)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
credentials <- data.frame(
user = c("javi", "javi_1",  "javi_2"),
password = c(scrypt::hashPassword("javi"), scrypt::hashPassword("javi_1"), scrypt::hashPassword("javi_2")),
is_hashed_password = TRUE,
comment = c("super", "user", "user"),
stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
credentials <- data.frame(
user = c("javi", "javi_1",  "javi_2"),
password = c(scrypt::hashPassword("javi"), scrypt::hashPassword("javi_1"), scrypt::hashPassword("javi_2")),
is_hashed_password = TRUE,
comment = c("super", "user", "user"),
stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
